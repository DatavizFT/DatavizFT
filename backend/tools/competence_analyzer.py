"""
Competence Analyzer - Analyse des comp√©tences dans les offres d'emploi
D√©tection, comptage et statistiques des comp√©tences
"""

import re
from typing import Dict, List, Any, Tuple, Optional
from collections import defaultdict, Counter
from .text_processor import extraire_texte_offre, rechercher_competence_dans_texte


class CompetenceAnalyzer:
    """Analyseur de comp√©tences dans les offres d'emploi"""
    
    def __init__(self, competences_referentiel: Dict[str, List[str]]):
        """
        Initialise l'analyseur avec le r√©f√©rentiel de comp√©tences
        
        Args:
            competences_referentiel: Dictionnaire des comp√©tences par cat√©gorie
        """
        self.referentiel = competences_referentiel
        self.cache_resultats = {}
    
    def analyser_offres(self, 
                       offres: List[Dict[str, Any]], 
                       verbose: bool = True) -> Dict[str, Any]:
        """
        Analyse un ensemble d'offres pour extraire les statistiques de comp√©tences
        
        Args:
            offres: Liste des offres √† analyser
            verbose: Afficher les logs de progression
        
        Returns:
            Dictionnaire avec les r√©sultats d'analyse par cat√©gorie
        """
        if verbose:
            print("üîç ANALYSE DES COMP√âTENCES")
            print("=" * 50)
        
        nb_offres_total = len(offres)
        resultats_par_categorie = {}
        
        # Analyse par cat√©gorie
        for categorie, competences in self.referentiel.items():
            if verbose:
                print(f"üìä Analyse cat√©gorie: {categorie} ({len(competences)} comp√©tences)")
            
            resultats_competences = []
            
            for competence in competences:
                count = 0
                offres_avec_competence = []
                
                for i, offre in enumerate(offres):
                    texte_offre = extraire_texte_offre(offre)
                    
                    if rechercher_competence_dans_texte(texte_offre, competence):
                        count += 1
                        offres_avec_competence.append({
                            'id': offre.get('id', f'offre_{i}'),
                            'intitule': offre.get('intitule', ''),
                            'entreprise': offre.get('entreprise', {}).get('nom', '')
                        })
                
                if count > 0:
                    pourcentage = (count / nb_offres_total) * 100
                    resultats_competences.append({
                        'competence': competence,
                        'occurrences': count,
                        'pourcentage': round(pourcentage, 1),
                        'offres': offres_avec_competence[:5]
                    })
            
            # Tri par nombre d'occurrences d√©croissant
            resultats_competences.sort(key=lambda x: x['occurrences'], reverse=True)
            
            resultats_par_categorie[categorie] = {
                'competences': resultats_competences,
                'nb_competences_detectees': len(resultats_competences),
                'nb_competences_total': len(competences)
            }
            
            if verbose and resultats_competences:
                top_3 = resultats_competences[:3]
                for i, result in enumerate(top_3, 1):
                    print(f"   {i}. {result['competence']}: {result['occurrences']} offres ({result['pourcentage']}%)")
        
        return {
            'resultats_par_categorie': resultats_par_categorie,
            'nb_offres_analysees': nb_offres_total
        }


# Fonction utilitaire pour compatibilit√©
def analyser_competences_offres(offres: List[Dict[str, Any]], 
                               competences_referentiel: Dict[str, List[str]]) -> Dict[str, Any]:
    """
    Fonction utilitaire pour analyser les comp√©tences dans les offres
    
    Args:
        offres: Liste des offres √† analyser
        competences_referentiel: R√©f√©rentiel de comp√©tences
    
    Returns:
        R√©sultats de l'analyse
    """
    analyzer = CompetenceAnalyzer(competences_referentiel)
    return analyzer.analyser_offres(offres)