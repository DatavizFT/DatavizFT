name: 🚀 Auto Release

on:
  workflow_run:
    workflows: ["🚀 CI/CD Pipeline - DatavizFT"]
    branches: ["main"]
    types: [completed]
  workflow_dispatch:  # Permet déclenchement manuel

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  # ===============================================
  # Release automatique basée sur les commits
  # ===============================================
  auto-release:
    name: 📦 Auto Release
    runs-on: ubuntu-latest
    # Ne s'exécute que si le workflow CI/CD a réussi ET pas de [skip release]
    if: |
      github.event.workflow_run.conclusion == 'success' && 
      !contains(github.event.workflow_run.head_commit.message, '[skip release]')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Utiliser PAT si disponible, sinon GITHUB_TOKEN
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
    
    - name: 🏷️ Generate version and changelog
      id: version
      run: |
        # Version basée sur la date et le hash court
        VERSION="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
        
        # Changelog depuis le dernier tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        echo "Last tag found: $LAST_TAG"
        
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges | head -20)
        else
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges -10)
        fi
        
        # Vérifier que le changelog n'est pas vide
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="- Initial release or no notable changes"
        fi
        
        # Sauvegarder changelog dans un fichier (gérer les caractères spéciaux)
        echo "$CHANGELOG" > changelog.tmp
        echo "Generated changelog with $(echo "$CHANGELOG" | wc -l) entries"
        cat changelog.tmp
    
    - name: 🎯 Detect change type
      id: changes
      run: |
        # Analyser les commits pour déterminer le type de release
        COMMITS=$(git log --pretty=format:"%s" -10)
        
        if echo "$COMMITS" | grep -E "^feat(\(.*\))?!:|^BREAKING CHANGE:|breaking change" -i; then
          echo "type=major" >> $GITHUB_OUTPUT
          echo "🚨 Breaking changes detected"
        elif echo "$COMMITS" | grep -E "^feat(\(.*\))?:|^add:|^new:" -i; then
          echo "type=minor" >> $GITHUB_OUTPUT  
          echo "✨ New features detected"
        elif echo "$COMMITS" | grep -E "^fix(\(.*\))?:|^bug:|^patch:" -i; then
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "🐛 Bug fixes detected"
        else
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "🔧 General improvements"
        fi
    
    - name: 📋 Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "DatavizFT ${{ steps.version.outputs.version }}"
        body_path: changelog.tmp
        draft: false
        prerelease: false
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
    
    - name: 💬 Commit status
      run: |
        echo "🎉 Release ${{ steps.version.outputs.version }} créée avec succès!"
        echo "📋 Type: ${{ steps.changes.outputs.type }}"