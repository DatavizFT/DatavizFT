# =============================================================================
# Script d'installation MongoDB pour DatavizFT (Windows)
# =============================================================================

Write-Host "üöÄ Installation MongoDB pour DatavizFT" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green

# Test si MongoDB est d√©j√† install√©
try {
    $mongoVersion = & mongo --version 2>$null
    if ($mongoVersion) {
        Write-Host "‚úÖ MongoDB d√©j√† install√©: $mongoVersion" -ForegroundColor Green
        Write-Host "üîÑ Tentative de d√©marrage du service..." -ForegroundColor Yellow
        
        # D√©marrer le service MongoDB
        try {
            Start-Service -Name "MongoDB" -ErrorAction Stop
            Write-Host "‚úÖ Service MongoDB d√©marr√©" -ForegroundColor Green
        }
        catch {
            Write-Host "‚ö†Ô∏è  Impossible de d√©marrer le service MongoDB automatiquement" -ForegroundColor Yellow
            Write-Host "   Essayez: net start MongoDB" -ForegroundColor Cyan
        }
        
        exit 0
    }
}
catch {
    Write-Host "üì• MongoDB non d√©tect√©, installation n√©cessaire..." -ForegroundColor Yellow
}

# Options d'installation
Write-Host ""
Write-Host "Choisissez une m√©thode d'installation:" -ForegroundColor Cyan
Write-Host "1. üç´ Chocolatey (Recommand√© - automatique)" -ForegroundColor White
Write-Host "2. üì• T√©l√©chargement manuel" -ForegroundColor White  
Write-Host "3. ‚òÅÔ∏è  MongoDB Atlas (Cloud gratuit)" -ForegroundColor White
Write-Host "4. üê≥ Docker Desktop (si disponible)" -ForegroundColor White

$choice = Read-Host "`nEntrez votre choix (1-4)"

switch ($choice) {
    "1" {
        Write-Host "`nüç´ Installation via Chocolatey..." -ForegroundColor Green
        
        # V√©rifier si Chocolatey est install√©
        try {
            $chocoVersion = & choco --version 2>$null
            Write-Host "‚úÖ Chocolatey d√©tect√©: $chocoVersion" -ForegroundColor Green
        }
        catch {
            Write-Host "üì• Installation de Chocolatey..." -ForegroundColor Yellow
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        }
        
        # Installer MongoDB
        Write-Host "üì¶ Installation de MongoDB Community..." -ForegroundColor Yellow
        & choco install mongodb -y
        
        # Cr√©er le dossier de donn√©es
        $dataPath = "C:\data\db"
        if (!(Test-Path $dataPath)) {
            New-Item -ItemType Directory -Path $dataPath -Force
            Write-Host "‚úÖ Dossier de donn√©es cr√©√©: $dataPath" -ForegroundColor Green
        }
        
        # D√©marrer le service
        Write-Host "üîÑ D√©marrage du service MongoDB..." -ForegroundColor Yellow
        Start-Service -Name "MongoDB"
        Write-Host "‚úÖ MongoDB install√© et d√©marr√©!" -ForegroundColor Green
    }
    
    "2" {
        Write-Host "`nüì• Installation manuelle..." -ForegroundColor Green
        Write-Host "1. Allez sur: https://www.mongodb.com/try/download/community" -ForegroundColor Cyan
        Write-Host "2. T√©l√©chargez MongoDB Community Server 7.0 pour Windows" -ForegroundColor Cyan  
        Write-Host "3. Installez avec les options par d√©faut" -ForegroundColor Cyan
        Write-Host "4. Revenez ici et relancez ce script" -ForegroundColor Cyan
        
        Read-Host "`nAppuyez sur Entr√©e apr√®s l'installation..."
    }
    
    "3" {
        Write-Host "`n‚òÅÔ∏è  Configuration MongoDB Atlas..." -ForegroundColor Green
        Write-Host "1. Cr√©ez un compte sur: https://cloud.mongodb.com" -ForegroundColor Cyan
        Write-Host "2. Cr√©ez un cluster gratuit (M0 Sandbox)" -ForegroundColor Cyan
        Write-Host "3. Configurez l'acc√®s r√©seau (ajoutez 0.0.0.0/0 pour dev)" -ForegroundColor Cyan
        Write-Host "4. Cr√©ez un utilisateur de base de donn√©es" -ForegroundColor Cyan
        Write-Host "5. R√©cup√©rez la cha√Æne de connexion" -ForegroundColor Cyan
        
        Write-Host "`nExemple de cha√Æne de connexion Atlas:" -ForegroundColor Yellow
        Write-Host "mongodb+srv://username:password@cluster0.xxxxx.mongodb.net/dataviz_ft_dev" -ForegroundColor White
        
        $atlasUrl = Read-Host "`nEntrez votre cha√Æne de connexion Atlas (optionnel)"
        if ($atlasUrl) {
            # Mettre √† jour le fichier .env
            $envPath = ".env"
            if (Test-Path $envPath) {
                $envContent = Get-Content $envPath -Raw
                $newLine = "MONGODB_URL=" + $atlasUrl
                $envContent = $envContent -replace 'MONGODB_URL=.*', $newLine
                Set-Content -Path $envPath -Value $envContent
                Write-Host "‚úÖ Fichier .env mis √† jour avec Atlas" -ForegroundColor Green
            }
        }
        
        Write-Host "‚úÖ Configuration Atlas termin√©e!" -ForegroundColor Green
    }
    
    "4" {
        Write-Host "`nüê≥ V√©rification de Docker..." -ForegroundColor Green
        try {
            $dockerVersion = & docker --version 2>$null
            Write-Host "‚úÖ Docker d√©tect√©: $dockerVersion" -ForegroundColor Green
            
            Write-Host "üîÑ D√©marrage de MongoDB avec Docker..." -ForegroundColor Yellow
            & docker run -d --name datavizft_mongodb -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=datavizft2025 mongo:7.0
            
            Write-Host "‚úÖ MongoDB d√©marr√© dans Docker!" -ForegroundColor Green
            Write-Host "üìä Interface: docker exec -it datavizft_mongodb mongosh" -ForegroundColor Cyan
        }
        catch {
            Write-Host "‚ùå Docker non d√©tect√©. Installez Docker Desktop puis relancez." -ForegroundColor Red
            Write-Host "   T√©l√©chargement: https://www.docker.com/products/docker-desktop/" -ForegroundColor Cyan
        }
    }
    
    default {
        Write-Host "‚ùå Choix invalide. Relancez le script." -ForegroundColor Red
        exit 1
    }
}

# Test de connexion final
Write-Host "`nüîç Test de connexion √† MongoDB..." -ForegroundColor Yellow
try {
    # Test avec mongosh (nouveau) ou mongo (ancien)
    try {
        & mongosh --eval "db.version()" --quiet 2>$null
        Write-Host "‚úÖ Connexion MongoDB r√©ussie avec mongosh!" -ForegroundColor Green
    }
    catch {
        & mongo --eval "db.version()" --quiet 2>$null  
        Write-Host "‚úÖ Connexion MongoDB r√©ussie avec mongo!" -ForegroundColor Green
    }
    
    Write-Host ""
    Write-Host "üéâ MongoDB est pr√™t pour DatavizFT!" -ForegroundColor Green
    Write-Host "üìã Prochaines √©tapes:" -ForegroundColor Cyan
    Write-Host "   1. python scripts/test_mongodb.py" -ForegroundColor White
    Write-Host "   2. python backend/main.py --stats" -ForegroundColor White
    
}
catch {
    Write-Host "‚ö†Ô∏è  Impossible de se connecter √† MongoDB" -ForegroundColor Yellow
    Write-Host "   V√©rifiez que le service est d√©marr√©:" -ForegroundColor Cyan
    Write-Host "   - Windows: net start MongoDB" -ForegroundColor White
    Write-Host "   - Docker: docker start datavizft_mongodb" -ForegroundColor White
}